# a function calculating the probability of gene expression based on the expected values of the Boolean values
a = b = list()
oneProb = list()
for (n in seq(0, (100-s), s)){
count = 0 # need to rezero the count within the loop to make sure each loop count start as 0
one = subset(x , (x$AP_Coord > n) & (x$AP_Coord < (n +s)))
for (i in one[[gene]]) {
if (i ==1){
count = count + 1
}
}
oneProb = append(oneProb, count / length(one$AP_Coord))
}
return(oneProb)
}
ThresholdFun = function(x = files, g = gene){
# a function calculating the threshold for converting intensity values into Boolean values
timeframe = length(x)
onelist = list()
for (t in seq(timeframe)){
one = mean(as.numeric(x[[t]][[g]]))
onelist = append(onelist, one)
}
return(mean(as.numeric(onelist)))
}
GeneOnOffFun = function(x = genedata, threshold=as.numeric(x)){
# a function converting intensity data into Boolean (on/off) value for the inputted gene
return(ifelse ( x >= threshold, 1, 0))
# only consider the first 2125 data points due to the difference length of each time frame
}
Probability_StripFun = function(data, sep , gene, threshold) {
# a function to group the data into smaller strips and then convert the intensity value into probabilities
one_prob = list()
for (t in seq(8)){
data[[t]][[gene]] = GeneOnOffFun(data[[t]][[gene]], threshold)
one_prob = append(one_prob, GeneProbabilityFun(data[[t]], s= sep, gene))
}
one = data.frame(matrix(unlist(one_prob), nrow = 100, ncol = 8, byrow = F)) # organize in Col. not in row
names(one) = c("t1", "t2","t3","t4","t5","t6","t7","t8")
return(one)
}
BooleanStripFun = function(x = datafile, s = separation, g = gene, threshold) {
# a function to group the data into smaller strips and then convert the intensity value into Boolean
one_strip = DataStripFun(x, s, g, mean)
one_Boolean = GeneOnOffFun(one_strip, threshold)
#     one = data.frame(matrix(unlist(one_Boolean), nrow = 100/s, ncol = 8, byrow = T))
return(one_Boolean)
}
LinesPlotFun = function(xplot = xrange, x = files, t = timeframe, c = color){
# a function plotting the data into a line, t has to start at 0 first.
return(lines(xplot, x[, t], cex = 1, col = c))
# the indicies for x is to correctly select the data for the specific timeframe. (20 data points per timeframe)
}
PlotSetupFun = function(xrange = xplot, x = files, y = title, z = ylabel, t = timeframe) {
# plot setup and its parameters such as axies , title ...
return( plot(xrange, x[, 1], type="n",
main = paste(y, 'At Time',as.character(t), sep=" "), cex.main =1,
xlab = "A-P Coord.", xlim = c(0, 100),
ylab = z, ylim = c(0, 1),
axes = F, cex.lab = 1)
)
}
PlotExportFun = function(name = filesname, t = timeframe){
# Export plot images to the current directory as png files
return(dev.copy(png, paste(name, as.character(t), ".png" , sep ="")))
}
Analysis_Separate_Plot = function(xrange, gt, kr, kni, hb, nstrip){
# A function to plot the results of the Boolean analysis into two types of plots:
#  1. compact plot: with all four gene plot together;
#  2. separate plot: with each gene in its own subplot.
# the plots are also being exported into the speficif path!
dir1 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_compact"
dir2 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_separate"
# I. All genes in one plot
setwd(dir1) # changed the working directory to the one for exporting the images of the plots
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)) {
PlotSetupFun(xrange, gt, paste('FlyEx Data in Probabilities Values with', nstrip, 'Strips') , 'Probability Value', t)
LinesPlotFun(xrange, gt, t, 'red')
LinesPlotFun(xrange, kr, t, 'blue')
LinesPlotFun(xrange, kni, t, 'green')
LinesPlotFun(xrange, hb, t , 'yellow')
legend(x = 92, y = 1, legend = c('gt' , 'kr' , 'kni' , 'hb') ,
pch="-", col = c('red', 'blue', 'green', 'yellow'))
box()
axis(1, las = 2)
axis(2, las = 2)
PlotExportFun(paste('Probability_',nstrip, 'strips') , t)
dev.off() # this is critically important!! to turn dev.copy once the plots are done, otherwise you will get nothing
}
# II. Four genes in separate plot.
setwd(dir2)
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)){
par(mfrow = c(2,2))
plot(xrange, gt[,t], type = 'l', main = paste('gt at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'red',cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, kr[,t], type = 'l', main = paste('kr at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'blue', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, kni[,t], type = 'l', main = paste('kni at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'green', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, hb[,t], type = 'l', main = paste('hb at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'yellow', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
PlotExportFun(paste('Probability_', nstrip, '_strip_separate') , t)
dev.off()
}
}
Comparison_Plot = function(xrange, gt1, gts, kr1, krs, kni1, knis, hb1, hbs){
# a function to compare the probabilistic results of the FlyEx data and simulation
dir2 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_separate"
setwd(dir2)
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)){
par(mfrow = c(2,2), xpd = T)
plot(xrange, gt1[,t], type = 'l', lty = 1, main = paste('gt at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim  = c(0, 1), col = 'red', lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(gts[t]), lty = 2, lwd = 2, col = 'red')
legend(x =45 , y =1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('red', 'red'), cex = 1, horiz = T)
plot(xrange, kr1[,t], type = 'l', lty = 1, main = paste('kr at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'blue',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(krs[t]), lty = 2, lwd = 2, col = 'blue')
legend(x = 45, y = 1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('blue', 'blue'), cex = 1, horiz = T)
plot(xrange, kni1[,t], type = 'l', lty = 1, main = paste('kni at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'green',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(knis[t]), lty = 2, lwd = 2, col = 'green')
legend(x = 45, y = 1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('green', 'green'), cex = 1, horiz = T)
plot(xrange, hb1[,t], type = 'l', lty = 1, main = paste('hb at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'yellow',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(hbs[t]), lty = 2, lwd = 2, col = 'yellow')
legend(x = 45, y = 1.1, legend = c('wild', "Sim."), lty = c(1,2), col = c('yellow', 'yellow'), cex = 1, horiz = T)
PlotExportFun(paste('Prob._comparison_',100, 'strips') , t)
dev.off() # this is critically important!! to turn dev.copy once the plots are done, otherwise you will get nothing
}
}
# ---------------------------------------------------------
# end of functions
# ---------------------------------------------------------
# -----------------------------------
# loading the FlyEx data into data.frame and probability conversion
# -----------------------------------
dir1_R3 = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/gt_kni14At1-8_w_R3/txt/byEmbryos"
dir2_R3 = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/byEmbryos"
dir_gts = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_gt_Avg"
dir_krs = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_kr_Avg"
dir_knis = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_kni_Avg"
dir_hbs  = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_hb_Avg"
# round 3 embryo whole data kni & gt swap = T
setwd(dir1_R3)
f1_R3 = list.files()
gtfiles_R3 = lapply(f1_R3, DataReadFun, name1 = "eve", name2 = "kni", name3 = "gt")
# round 3 embryo wholde data: kr & hb
setwd(dir2_R3)
f2_R3 = list.files()
hbfiles_R3 = lapply(f2_R3, DataReadFun, name1="eve", name2 = "kr", name3 = "hb")
# load all the simulated avg results into R
setwd(dir_gts)
f_gts = list.files()
gt_sim = lapply(f_gts, read.delim, header = F, sep = "\n")
setwd(dir_krs)
f_krs = list.files()
kr_sim = lapply(f_krs, read.delim, header = F, sep = "\n")
setwd(dir_knis)
f_knis = list.files()
kni_sim = lapply(f_knis, read.delim, header = F, sep = "\n")
setwd(dir_hbs)
f_hbs = list.files()
hb_sim = lapply(f_hbs, read.delim, header = F, sep = "\n")
#------------------------------------
# calculating the threshold
gt_threshold = ThresholdFun(gtfiles_R3, 'gt')
kr_threshold = ThresholdFun(hbfiles_R3, 'kr')
kni_threshold = ThresholdFun(gtfiles_R3, 'kni')
hb_threshold = ThresholdFun(hbfiles_R3, 'hb')
#------------------------------------
# converting intensity into probabilities
gt_prob = Probability_StripFun(gtfiles_R3, sep = 1, gene = "gt", threshold = gt_threshold)
kr_prob = Probability_StripFun(hbfiles_R3, sep = 1, gene = "kr", threshold = hb_threshold)
kni_prob = Probability_StripFun(gtfiles_R3, sep = 1, gene = "kni", threshold = kni_threshold)
hb_prob = Probability_StripFun(hbfiles_R3, sep = 1, gene = "hb", threshold = hb_threshold)
# ---------------------
# clean up the data for plotting: remove 'NA', re-organize the variables, merge all data into one... etc.
# ---------------------
# remove 'NA' values and gather wild type (WT) data into LONG format:
gt_wt = gt_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, gt, -AP_Coord) # gather into Long format
kr_wt = kr_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, kr_Probability, -AP_Coord) # gather into Long format
kni_wt = kni_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, kni_Probability, -AP_Coord) # gather into Long format
hb_wt = hb_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, hb_Probability, -AP_Coord) # gather into Long format
GG_R3_wt = mutate(gt_wt, 'kr' = kr_wt$kr_Probability, 'kni' = kni_wt$kni_Probability,
'hb' = hb_wt$hb_Probability)
GG_R3_wt_long = gather(GG_R3_wt, Gene, WT_Probability, -c(AP_Coord, Timeframe))
# re-organize simulated data:
gt_sim_df = kr_sim_df =kni_sim_df = hb_sim_df = data.frame('AP_Coord' = 4:98)
for (t in 1:length(gt_sim)){
gt_sim_df = cbind(gt_sim_df, gt_sim[[t]][4:98, ])
kr_sim_df = cbind(kr_sim_df, kr_sim[[t]])[4:98, ]
kni_sim_df = cbind(kni_sim_df, kni_sim[[t]])[4:98, ]
hb_sim_df = cbind(hb_sim_df, hb_sim[[t]])[4:98, ]
}
rnames = c('AP_Coord', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8')
names(gt_sim_df) = names(kr_sim_df) = names(kni_sim_df) = names(hb_sim_df) = rnames
#------------------------------------
# plot the results into figures
# xrange = seq(1, 100, 1)
# xrange2 = seq(35, 91, 1)
# Comparison_Plot(xrange2, gt_prob, gt_sim, kr_prob, kr_sim, kni_prob, kni_sim, hb_prob, hb_sim)
#Analysis_Separate_Plot(xrange, gtB_df100, krB_df100, kniB_df100, hbB_df100, 100)
gt_sim_df
#----------------------------------------------------------------------------------
# Coverting Experimental data from intensity to probabilities by counting,
# then compare the FlyEx probabilitis againt the simulated averaged data
#
#       author: jianhong chen
#       date: 7/18/2018
#--------------------------------------------------------------------------------------
# load required packages
library("ggplot2")
library("data.table")
library('purrr')
library("tidyr")
library('dplyr')
#---------------------------------------------------------------
# Lists of functions
#--------------------------------------------------------------
DataReadFun = function(x = path, name1, name2, name3){
# a function to read in the data files into a list object
one = data.frame(read.table(x, header = T ,
col.names = c("Nucleus_Number", "AP_Coord", "DV_Coord", name1, name2, name3)))
return(one)
}
DataStripFun = function(x = files, s = segmentLength, g = gene, met=method){
# a function to divide the data into vertical strips based on the input precentage, then take the avg of each strip.
timeframe = length(x)
oneAvgTotal = list()
for (t in seq(timeframe)){
oneAvg = list()# need to rezero for every timefrmae, otherwise it will keep adding the value
for (n in seq(0, (100-s), s)){
#             one = subset(x[[t]], (x[[t]]$AP_Coord > n) & (x[[t]]$AP_Coord < (n+s)))
df1 = subset(x[[t]], x[[t]]$AP_Coord > n)
df2 = subset(df1, df1$AP_Coord < n+s)
oneAvg = append(oneAvg,  met(df2[[g]]))
}
oneAvgTotal= append(oneAvgTotal, oneAvg) # extra list appending is needed to prevent adding the wrong data within the loop
}
return(oneAvgTotal)
}
GeneProbabilityFun = function( x = files, s = segmentLength, gene){
# a function calculating the probability of gene expression based on the expected values of the Boolean values
a = b = list()
oneProb = list()
for (n in seq(0, (100-s), s)){
count = 0 # need to rezero the count within the loop to make sure each loop count start as 0
one = subset(x , (x$AP_Coord > n) & (x$AP_Coord < (n +s)))
for (i in one[[gene]]) {
if (i ==1){
count = count + 1
}
}
oneProb = append(oneProb, count / length(one$AP_Coord))
}
return(oneProb)
}
ThresholdFun = function(x = files, g = gene){
# a function calculating the threshold for converting intensity values into Boolean values
timeframe = length(x)
onelist = list()
for (t in seq(timeframe)){
one = mean(as.numeric(x[[t]][[g]]))
onelist = append(onelist, one)
}
return(mean(as.numeric(onelist)))
}
GeneOnOffFun = function(x = genedata, threshold=as.numeric(x)){
# a function converting intensity data into Boolean (on/off) value for the inputted gene
return(ifelse ( x >= threshold, 1, 0))
# only consider the first 2125 data points due to the difference length of each time frame
}
Probability_StripFun = function(data, sep , gene, threshold) {
# a function to group the data into smaller strips and then convert the intensity value into probabilities
one_prob = list()
for (t in seq(8)){
data[[t]][[gene]] = GeneOnOffFun(data[[t]][[gene]], threshold)
one_prob = append(one_prob, GeneProbabilityFun(data[[t]], s= sep, gene))
}
one = data.frame(matrix(unlist(one_prob), nrow = 100, ncol = 8, byrow = F)) # organize in Col. not in row
names(one) = c("t1", "t2","t3","t4","t5","t6","t7","t8")
return(one)
}
BooleanStripFun = function(x = datafile, s = separation, g = gene, threshold) {
# a function to group the data into smaller strips and then convert the intensity value into Boolean
one_strip = DataStripFun(x, s, g, mean)
one_Boolean = GeneOnOffFun(one_strip, threshold)
#     one = data.frame(matrix(unlist(one_Boolean), nrow = 100/s, ncol = 8, byrow = T))
return(one_Boolean)
}
LinesPlotFun = function(xplot = xrange, x = files, t = timeframe, c = color){
# a function plotting the data into a line, t has to start at 0 first.
return(lines(xplot, x[, t], cex = 1, col = c))
# the indicies for x is to correctly select the data for the specific timeframe. (20 data points per timeframe)
}
PlotSetupFun = function(xrange = xplot, x = files, y = title, z = ylabel, t = timeframe) {
# plot setup and its parameters such as axies , title ...
return( plot(xrange, x[, 1], type="n",
main = paste(y, 'At Time',as.character(t), sep=" "), cex.main =1,
xlab = "A-P Coord.", xlim = c(0, 100),
ylab = z, ylim = c(0, 1),
axes = F, cex.lab = 1)
)
}
PlotExportFun = function(name = filesname, t = timeframe){
# Export plot images to the current directory as png files
return(dev.copy(png, paste(name, as.character(t), ".png" , sep ="")))
}
Analysis_Separate_Plot = function(xrange, gt, kr, kni, hb, nstrip){
# A function to plot the results of the Boolean analysis into two types of plots:
#  1. compact plot: with all four gene plot together;
#  2. separate plot: with each gene in its own subplot.
# the plots are also being exported into the speficif path!
dir1 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_compact"
dir2 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_separate"
# I. All genes in one plot
setwd(dir1) # changed the working directory to the one for exporting the images of the plots
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)) {
PlotSetupFun(xrange, gt, paste('FlyEx Data in Probabilities Values with', nstrip, 'Strips') , 'Probability Value', t)
LinesPlotFun(xrange, gt, t, 'red')
LinesPlotFun(xrange, kr, t, 'blue')
LinesPlotFun(xrange, kni, t, 'green')
LinesPlotFun(xrange, hb, t , 'yellow')
legend(x = 92, y = 1, legend = c('gt' , 'kr' , 'kni' , 'hb') ,
pch="-", col = c('red', 'blue', 'green', 'yellow'))
box()
axis(1, las = 2)
axis(2, las = 2)
PlotExportFun(paste('Probability_',nstrip, 'strips') , t)
dev.off() # this is critically important!! to turn dev.copy once the plots are done, otherwise you will get nothing
}
# II. Four genes in separate plot.
setwd(dir2)
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)){
par(mfrow = c(2,2))
plot(xrange, gt[,t], type = 'l', main = paste('gt at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'red',cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, kr[,t], type = 'l', main = paste('kr at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'blue', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, kni[,t], type = 'l', main = paste('kni at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'green', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
plot(xrange, hb[,t], type = 'l', main = paste('hb at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
col = 'yellow', cex.main= 1.5, cex.lab= 1.5, cex.axis =1.5, lwd =2)
PlotExportFun(paste('Probability_', nstrip, '_strip_separate') , t)
dev.off()
}
}
Comparison_Plot = function(xrange, gt1, gts, kr1, krs, kni1, knis, hb1, hbs){
# a function to compare the probabilistic results of the FlyEx data and simulation
dir2 ="/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/plots and images/R_generated_temp_plots/trans._prob/FlyEx_separate"
setwd(dir2)
file.remove(list.files()) # remove all the exist files in the current directory
for (t in seq(8)){
par(mfrow = c(2,2), xpd = T)
plot(xrange, gt1[,t], type = 'l', lty = 1, main = paste('gt at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim  = c(0, 1), col = 'red', lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(gts[t]), lty = 2, lwd = 2, col = 'red')
legend(x =45 , y =1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('red', 'red'), cex = 1, horiz = T)
plot(xrange, kr1[,t], type = 'l', lty = 1, main = paste('kr at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'blue',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(krs[t]), lty = 2, lwd = 2, col = 'blue')
legend(x = 45, y = 1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('blue', 'blue'), cex = 1, horiz = T)
plot(xrange, kni1[,t], type = 'l', lty = 1, main = paste('kni at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'green',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(knis[t]), lty = 2, lwd = 2, col = 'green')
legend(x = 45, y = 1.1, legend = c("Wild", "Sim."), lty = c(1,2), col = c('green', 'green'), cex = 1, horiz = T)
plot(xrange, hb1[,t], type = 'l', lty = 1, main = paste('hb at time', t), ylab = 'Probability' , xlab = 'AP- Coord',
ylim = c(0, 1), col = 'yellow',lwd = 2, cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.5)
lines(xrange, unlist(hbs[t]), lty = 2, lwd = 2, col = 'yellow')
legend(x = 45, y = 1.1, legend = c('wild', "Sim."), lty = c(1,2), col = c('yellow', 'yellow'), cex = 1, horiz = T)
PlotExportFun(paste('Prob._comparison_',100, 'strips') , t)
dev.off() # this is critically important!! to turn dev.copy once the plots are done, otherwise you will get nothing
}
}
# ---------------------------------------------------------
# end of functions
# ---------------------------------------------------------
# -----------------------------------
# loading the FlyEx data into data.frame and probability conversion
# -----------------------------------
dir1_R3 = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/gt_kni14At1-8_w_R3/txt/byEmbryos"
dir2_R3 = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/byEmbryos"
dir_gts = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_gt_Avg"
dir_krs = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_kr_Avg"
dir_knis = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_kni_Avg"
dir_hbs  = "/Users/jianhongchen/Desktop/UCSC Rotaion(Marcella)/data/kr_hb14At1-8_w_R3/txt/Simulated_hb_Avg"
# round 3 embryo whole data kni & gt swap = T
setwd(dir1_R3)
f1_R3 = list.files()
gtfiles_R3 = lapply(f1_R3, DataReadFun, name1 = "eve", name2 = "kni", name3 = "gt")
# round 3 embryo wholde data: kr & hb
setwd(dir2_R3)
f2_R3 = list.files()
hbfiles_R3 = lapply(f2_R3, DataReadFun, name1="eve", name2 = "kr", name3 = "hb")
# load all the simulated avg results into R
setwd(dir_gts)
f_gts = list.files()
gt_sim = lapply(f_gts, read.delim, header = F, sep = "\n")
setwd(dir_krs)
f_krs = list.files()
kr_sim = lapply(f_krs, read.delim, header = F, sep = "\n")
setwd(dir_knis)
f_knis = list.files()
kni_sim = lapply(f_knis, read.delim, header = F, sep = "\n")
setwd(dir_hbs)
f_hbs = list.files()
hb_sim = lapply(f_hbs, read.delim, header = F, sep = "\n")
#------------------------------------
# calculating the threshold
gt_threshold = ThresholdFun(gtfiles_R3, 'gt')
kr_threshold = ThresholdFun(hbfiles_R3, 'kr')
kni_threshold = ThresholdFun(gtfiles_R3, 'kni')
hb_threshold = ThresholdFun(hbfiles_R3, 'hb')
#------------------------------------
# converting intensity into probabilities
gt_prob = Probability_StripFun(gtfiles_R3, sep = 1, gene = "gt", threshold = gt_threshold)
kr_prob = Probability_StripFun(hbfiles_R3, sep = 1, gene = "kr", threshold = hb_threshold)
kni_prob = Probability_StripFun(gtfiles_R3, sep = 1, gene = "kni", threshold = kni_threshold)
hb_prob = Probability_StripFun(hbfiles_R3, sep = 1, gene = "hb", threshold = hb_threshold)
# ---------------------
# clean up the data for plotting: remove 'NA', re-organize the variables, merge all data into one... etc.
# ---------------------
# remove 'NA' values and gather wild type (WT) data into LONG format:
gt_wt = gt_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, gt, -AP_Coord) # gather into Long format
kr_wt = kr_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, kr_Probability, -AP_Coord) # gather into Long format
kni_wt = kni_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, kni_Probability, -AP_Coord) # gather into Long format
hb_wt = hb_prob[4:98, ] %>% # remove 'NA' value
mutate('AP_Coord' = 4:98) %>%  # add 'AP_Coord' columns
gather(Timeframe, hb_Probability, -AP_Coord) # gather into Long format
GG_R3_wt = mutate(gt_wt, 'kr' = kr_wt$kr_Probability, 'kni' = kni_wt$kni_Probability,
'hb' = hb_wt$hb_Probability)
GG_R3_wt_long = gather(GG_R3_wt, Gene, WT_Probability, -c(AP_Coord, Timeframe))
# re-organize simulated data:
gt_sim_df = kr_sim_df =kni_sim_df = hb_sim_df = data.frame('AP_Coord' = 4:98)
for (t in 1:length(gt_sim)){
gt_sim_df = cbind(gt_sim_df, gt_sim[[t]][4:98, ])
kr_sim_df = cbind(kr_sim_df, kr_sim[[t]][4:98, ])
kni_sim_df = cbind(kni_sim_df, kni_sim[[t]][4:98, ])
hb_sim_df = cbind(hb_sim_df, hb_sim[[t]][4:98, ])
}
rnames = c('AP_Coord', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8')
names(gt_sim_df) = names(kr_sim_df) = names(kni_sim_df) = names(hb_sim_df) = rnames
#------------------------------------
# plot the results into figures
# xrange = seq(1, 100, 1)
# xrange2 = seq(35, 91, 1)
# Comparison_Plot(xrange2, gt_prob, gt_sim, kr_prob, kr_sim, kni_prob, kni_sim, hb_prob, hb_sim)
#Analysis_Separate_Plot(xrange, gtB_df100, krB_df100, kniB_df100, hbB_df100, 100)
gt_sim_df
rnames = c('AP_Coord', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8')
names(gt_sim_df) = names(kr_sim_df) = names(kni_sim_df) = names(hb_sim_df) = rnames
gt_exp = gather(gt_sim_df, Timeframe, gt, -AP_Coord)
kr_exp = gather(kr_sim_df, Timeframe, kr, -AP_Coord)
kni_exp = gather(kni_sim_df, Timeframe, kni, -AP_Coord)
hb_exp = gather(hb_sim_df, Timeframe, hb, -AP_Coord)
gt_exp
GG_R3_exp = mutate(gt_exp, 'kr' = kr_exp$kr, 'kni' = kni_exp$kni, 'hb' = hb_exp$hb)
GG_R3_exp
GG_R3_exp_long = gather(GG_R3_exp, Gene, Exp_Probability, -c(AP_Coord, Timeframe))
GG_R3_exp_long
str(GG_R3_exp_long)
# finally merge both Wilde type and simulation data together into one complete dataframe
GG_R3_compl = mutate(GG_R3_wt_long, 'Sim_Probability' = GG_R3_exp_long$Exp_Probability)
GG_R3_compl
GG_R3_compl_long = gather(GG_R3_compl, Source, Probability, -c(AP_Coord, Timeframe, Gene))
GG_R3_compl_long
summary(GG_R3_compl_long)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability, color = Gene, linetype = Source)) +
geom_line() +
facet_grid(.~ Timeframe)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_line() +
facet_grid(Timeframe ~ Gene)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_line() +
facet_grid(Gene ~ Timeframe)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_line() +
facet_grid(Timeframe ~ Gene)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_area() +
facet_grid(Timeframe ~ Gene)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_line() +
lab(title = 'Wild Type vs Simulation by k-means Elbow Clustering on Gene-Gene Ratio') +
theme(title = element_text(size = 15)) +
facet_grid(Timeframe ~ Gene)
ggplot(GG_R3_compl_long, aes(x = AP_Coord, y = Probability ,linetype = Source)) +
geom_line() +
labs(title = 'Wild Type vs Simulation by k-means Elbow Clustering on Gene-Gene Ratio') +
theme(title = element_text(size = 15)) +
facet_grid(Timeframe ~ Gene)
